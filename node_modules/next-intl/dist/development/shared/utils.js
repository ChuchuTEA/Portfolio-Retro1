'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function isRelativeHref(href) {
  const pathname = typeof href === 'object' ? href.pathname : href;
  return pathname != null && !pathname.startsWith('/');
}
function isLocalHref(href) {
  if (typeof href === 'object') {
    return href.host == null && href.hostname == null;
  } else {
    const hasProtocol = /^[a-z]+:/i.test(href);
    return !hasProtocol;
  }
}
function localizeHref(href, locale) {
  let curLocale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : locale;
  let curPathname = arguments.length > 3 ? arguments[3] : undefined;
  if (!isLocalHref(href) || isRelativeHref(href)) {
    return href;
  }
  const isSwitchingLocale = locale !== curLocale;
  const isPathnamePrefixed = locale == null || hasPathnamePrefixed(locale, curPathname);
  const shouldPrefix = isSwitchingLocale || isPathnamePrefixed;
  if (shouldPrefix && locale != null) {
    return prefixHref(href, locale);
  }
  return href;
}
function prefixHref(href, locale) {
  let prefixedHref;
  if (typeof href === 'string') {
    prefixedHref = prefixPathname(locale, href);
  } else {
    prefixedHref = {
      ...href
    };
    if (href.pathname) {
      prefixedHref.pathname = prefixPathname(locale, href.pathname);
    }
  }
  return prefixedHref;
}
function unlocalizePathname(pathname, locale) {
  return pathname.replace(new RegExp("^/".concat(locale)), '') || '/';
}
function prefixPathname(locale, pathname) {
  let localizedHref = '/' + locale;

  // Avoid trailing slashes
  if (/^\/(\?.*)?$/.test(pathname)) {
    pathname = pathname.slice(1);
  }
  localizedHref += pathname;
  return localizedHref;
}
function hasPathnamePrefixed(locale, pathname) {
  const prefix = "/".concat(locale);
  return pathname === prefix || pathname.startsWith("".concat(prefix, "/"));
}
function matchesPathname( /** E.g. `/users/[userId]-[userName]` */
template, /** E.g. `/users/23-jane` */
pathname) {
  const regex = templateToRegex(template);
  return regex.test(pathname);
}
function templateToRegex(template) {
  const regexPattern = template
  // Replace optional catchall ('[[...slug]]')
  .replace(/\[\[(\.\.\.[^\]]+)\]\]/g, '?(.*)')
  // Replace catchall ('[...slug]')
  .replace(/\[(\.\.\.[^\]]+)\]/g, '(.+)')
  // Replace regular parameter ('[slug]')
  .replace(/\[([^\]]+)\]/g, '([^/]+)');
  return new RegExp("^".concat(regexPattern, "$"));
}

exports.hasPathnamePrefixed = hasPathnamePrefixed;
exports.isLocalHref = isLocalHref;
exports.isRelativeHref = isRelativeHref;
exports.localizeHref = localizeHref;
exports.matchesPathname = matchesPathname;
exports.prefixHref = prefixHref;
exports.prefixPathname = prefixPathname;
exports.templateToRegex = templateToRegex;
exports.unlocalizePathname = unlocalizePathname;
