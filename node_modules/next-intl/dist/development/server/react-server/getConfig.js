'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var core = require('use-intl/core');
var getRuntimeConfig = require('next-intl/config');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var getRuntimeConfig__default = /*#__PURE__*/_interopDefault(getRuntimeConfig);

// Make sure `now` is consistent across the request in case none was configured
function getDefaultNowImpl() {
  return new Date();
}
const getDefaultNow = React.cache(getDefaultNowImpl);

// This is automatically inherited by `NextIntlClientProvider` if
// the component is rendered from a Server Component
function getDefaultTimeZoneImpl() {
  return Intl.DateTimeFormat().resolvedOptions().timeZone;
}
const getDefaultTimeZone = React.cache(getDefaultTimeZoneImpl);
async function receiveRuntimeConfigImpl(locale, getConfig) {
  var _result, _result2;
  let result = getConfig === null || getConfig === void 0 ? void 0 : getConfig({
    locale
  });
  if (result instanceof Promise) {
    result = await result;
  }
  return {
    ...result,
    now: ((_result = result) === null || _result === void 0 ? void 0 : _result.now) || getDefaultNow(),
    timeZone: ((_result2 = result) === null || _result2 === void 0 ? void 0 : _result2.timeZone) || getDefaultTimeZone()
  };
}
const receiveRuntimeConfig = React.cache(receiveRuntimeConfigImpl);
async function getConfigImpl(locale) {
  const runtimeConfig = await receiveRuntimeConfig(locale, getRuntimeConfig__default.default);
  const opts = {
    ...runtimeConfig,
    locale
  };
  return core.initializeConfig(opts);
}
const getConfig = React.cache(getConfigImpl);
var getConfig$1 = getConfig;

exports.default = getConfig$1;
