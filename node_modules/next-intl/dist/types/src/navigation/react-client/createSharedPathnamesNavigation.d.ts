/// <reference types="node" />
import React, { ReactElement } from 'react';
import { AllLocales, LocalePrefix } from '../../shared/types';
import useBaseRouter from './useBaseRouter';
export default function createSharedPathnamesNavigation<Locales extends AllLocales>(opts?: {
    locales?: Locales;
    localePrefix?: LocalePrefix;
}): {
    Link: (props: Omit<Omit<Omit<Omit<Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, keyof {
        href: string | import("url").UrlObject;
        as?: (string | import("url").UrlObject) | undefined;
        replace?: boolean | undefined;
        scroll?: boolean | undefined;
        shallow?: boolean | undefined;
        passHref?: boolean | undefined;
        prefetch?: boolean | undefined;
        locale?: string | false | undefined;
        legacyBehavior?: boolean | undefined;
        onMouseEnter?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
        onTouchStart?: React.TouchEventHandler<HTMLAnchorElement> | undefined;
        onClick?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
    }> & {
        href: string | import("url").UrlObject;
        as?: (string | import("url").UrlObject) | undefined;
        replace?: boolean | undefined;
        scroll?: boolean | undefined;
        shallow?: boolean | undefined;
        passHref?: boolean | undefined;
        prefetch?: boolean | undefined;
        locale?: string | false | undefined;
        legacyBehavior?: boolean | undefined;
        onMouseEnter?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
        onTouchStart?: React.TouchEventHandler<HTMLAnchorElement> | undefined;
        onClick?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
    } & {
        children?: React.ReactNode;
    } & React.RefAttributes<HTMLAnchorElement>, "locale"> & {
        locale: string;
        localePrefix?: LocalePrefix | undefined;
    }, "ref"> & React.RefAttributes<HTMLAnchorElement>, "locale"> & {
        locale?: Locales[number] | undefined;
    } & {
        ref?: React.Ref<HTMLAnchorElement> | undefined;
    }, "localePrefix"> & {
        ref?: React.Ref<HTMLAnchorElement> | undefined;
    }) => ReactElement;
    redirect: (pathname: string, type?: import("next/navigation").RedirectType | undefined) => never;
    permanentRedirect: (pathname: string, type?: import("next/navigation").RedirectType | undefined) => never;
    usePathname: () => string;
    useRouter: typeof useBaseRouter;
};
